main:
  steps:
    - create_callback:
        call: events.create_callback_endpoint
        args:
            http_callback_method: "POST"
        result: callback_details
    - print_callback_details:
        call: sys.log
        args:
            severity: "INFO"
            text: $${"Listening for callbacks on " + callback_details.url}
    - to_task:
        try:
            steps:
                - trigger_job:
                    call: googleapis.pubsub.v1.projects.topics.publish
                    args:
                      topic: ${topic_id}
                      body:
                        messages:
                          - data: $${base64.encode(json.encode(callback_details))}
                - await_callback:
                    call: events.await_callback
                    args:
                        callback: $${callback_details}
                        timeout: 30.0
                    result: callback_request
                - print_callback_result:
                    call: sys.log
                    args:
                        severity: "INFO"
                        text: $${"Received " + json.encode_to_string(callback_request.http_request)}
                - process_callback_result:
                    switch:
                        - condition: $${callback_request.http_request.body.code == 500}
                          raise:
                            tags: ["RetryError"]
                            message: "Dataflow error: retry the job"
        retry:
            predicate: $${job_failure_predicate}
            max_retries: 5
            backoff:
                initial_delay: 1
                max_delay: 10
                multiplier: 2
job_failure_predicate:
    params: [e]
    steps:
      - when_to_repeat:
          switch:
            - condition: $${"TimeoutError" in e.tags}
              steps:
                  - log_error_1_and_retry:
                      call: sys.log
                      args:
                          severity: "WARNING"
                          text: "Timed out waiting for callback, retrying"
                  - exit_predicate_1:
                      return: true
            - condition: $${"RetryError" in e.tags}
              steps:
                  - log_error_2_and_retry:
                      call: sys.log
                      args:
                          severity: "WARNING"
                          text: "Retriable job error, retrying"
                  - exit_predicate_2:
                      return: true
      - otherwise:
          return: false
